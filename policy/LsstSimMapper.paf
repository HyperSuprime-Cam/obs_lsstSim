#<?cfg paf policy ?>

camera:        "../description/Full_STA_geom.paf"
defects:    "../description/defects"

needCalibRegistry: false

levels: {
    skyTile: "visit" "raft" "sensor"
    visit: "snap" "raft" "sensor" "channel"
    raft: "snap" "sensor" "channel"
    sensor: "snap" "channel"
    snap: "channel"
}
defaultLevel: "sensor"
defaultSubLevels: {
    skyTile: "sensor"
    visit: "sensor"
    raft: "sensor"
    sensor: "channel"
}

exposures: {
    raw: {
        template:    "raw/v%(visit)d-f%(filter)s/E%(snap)03d/R%(raft)s/S%(sensor)s/imsim_%(visit)d_R%(raft)s_S%(sensor)s_C%(channel)s_E%(snap)03d.fits.gz"
        python:     "lsst.afw.image.DecoratedImageU"
        persistable:         "DecoratedImageU"
        storage:     "FitsStorage"
        level:        "Amp"
        tables:        raw
        tables:        raw_skyTile
    }
    postISR: {
        template:    "postISR/v%(visit)d-f%(filter)s/s%(snap)d/R%(raft)s/S%(sensor)s/C%(channel)s.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Amp"
        tables:        raw
        tables:        raw_skyTile
    }
    postISRCCD: {
        template:    "postISRCCD/v%(visit)d-f%(filter)s/s%(snap)d/R%(raft)s/S%(sensor)s.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:        raw
        tables:        raw_skyTile
    }
    visitCCD: {
        template:    "visitCCD/v%(visit)d-f%(filter)s/R%(raft)s/S%(sensor)s.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:        raw
        tables:        raw_skyTile
    }
    crDiffim: {
        template:    "crDiffim/v%(visit)d-f%(filter)s/R%(raft)s/S%(sensor)s.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:        raw
        tables:        raw_skyTile
    }
    visitim: {
        template:      "visitim/v%(visit)d-f%(filter)s/R%(raft)s/S%(sensor)s.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:        raw
        tables:        raw_skyTile
    }
    calexp: {
        template:      "calexp/v%(visit)d-f%(filter)s/R%(raft)s/S%(sensor)s.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:        raw
        tables:        raw_skyTile
    }
    calsnap: {
        template:      "calsnap/v%(visit)d-f%(filter)s/s%(snap)d/R%(raft)s/S%(sensor)s.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:        raw
        tables:        raw_skyTile
    }
    biasOut: {
        template:    "bias/v0/R%(raft)s/S%(sensor)s/imsim_0_R%(raft)s_S%(sensor)s_C%(channel)s.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Amp"
        tables:       raw
    }
    darkOut: {
        template:    "dark/v1/R%(raft)s/S%(sensor)s/imsim_1_R%(raft)s_S%(sensor)s_C%(channel)s.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Amp"
        tables:       raw
    }
    flatOut: {
        template:    "flat/v2-f%(filter)s/R%(raft)s/S%(sensor)s/imsim_2_R%(raft)s_S%(sensor)s_C%(channel)s.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Amp"
        tables:       raw
    }
    fringeOut: {
        template:    "fringe/v2-f%(filter)s/R%(raft)s/S%(sensor)s/imsim_2_R%(raft)s_S%(sensor)s_C%(channel)s.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Amp"
        tables:       raw
    }
}

calibrations: {
    bias: {
        template:    "bias/v0/R%(raft)s/S%(sensor)s/imsim_0_R%(raft)s_S%(sensor)s_C%(channel)s.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Amp"
    }
    dark: {
        template:    "dark/v1/R%(raft)s/S%(sensor)s/imsim_1_R%(raft)s_S%(sensor)s_C%(channel)s.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Amp"
    }
    flat: {
        template:    "flat/v2-f%(filter)s/R%(raft)s/S%(sensor)s/imsim_2_R%(raft)s_S%(sensor)s_C%(channel)s.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Amp"
        reference:    "raw"
        columns:      "filter"
    }
    fringe: {
        template:    "fringe/v2-f%(filter)s/R%(raft)s/S%(sensor)s/imsim_2_R%(raft)s_S%(sensor)s_C%(channel)s.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Amp"
        reference:    "raw"
        columns:      "filter"
    }
}

datasets: {
    ampExposureId: {
        template:     "ignored"
        # Provide something to import, although we actually return a tuple
        python:       "lsst.daf.base.PropertySet"
        persistable:  "ignored"
        storage:      "ignored"
        tables:       "raw"
    }
    ampExposureId_bits: {
        template:     "ignored"
        # Provide something to import, although we actually return a tuple
        python:       "lsst.daf.base.PropertySet"
        persistable:  "ignored"
        storage:      "ignored"
        tables:       "raw"
    }
    ccdExposureId: {
        template:     "ignored"
        # Provide something to import, although we actually return a tuple
        python:       "lsst.daf.base.PropertySet"
        persistable:  "ignored"
        storage:      "ignored"
        tables:       "raw"
    }
    ccdExposureId_bits: {
        template:     "ignored"
        # Provide something to import, although we actually return a tuple
        python:       "lsst.daf.base.PropertySet"
        persistable:  "ignored"
        storage:      "ignored"
        tables:       "raw"
    }

    crDiffimSrc: {
        template:      "crDiffimSrc/v%(visit)d-f%(filter)s/R%(raft)s/S%(sensor)s.boost"
        python:        "lsst.afw.detection.PersistableSourceVector"
        persistable:        "PersistableSourceVector"
        storage:    "BoostStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    icSrc: {
        template:      "icSrc/v%(visit)d-f%(filter)s/R%(raft)s/S%(sensor)s.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:        "SourceCatalog"
        storage:    "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    icMatch: {
        template:      "icMatch/v%(visit)d-f%(filter)s/R%(raft)s/S%(sensor)s.fits"
        python:        "lsst.afw.table.BaseCatalog"
        persistable:        "BaseCatalog"
        storage:    "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    psf: {
        template:      "psf/v%(visit)d-f%(filter)s/R%(raft)s/S%(sensor)s.boost"
        python:        "lsst.afw.detection.Psf"
        persistable:        "Psf"
        storage:    "BoostStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    apCorr: {
        template:      "apCorr/v%(visit)d-f%(filter)s/R%(raft)s/S%(sensor)s.pickle"
        python:        "lsst.meas.algorithms.ApertureCorrection"
        persistable:        "ApertureCorrection"
        storage:    "PickleStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    src: {
        template:      "src/v%(visit)d-f%(filter)s/R%(raft)s/S%(sensor)s.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:        "SourceCatalog"
        storage:    "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    sourceHist: {
        template:      "results/st%(skyTile)d/sourceHist.fits"
        python:        "lsst.afw.image.DecoratedImageU"
        persistable:        "DecoratedImageU"
        storage:    "FitsStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    badSourceHist: {
        template:      "results/st%(skyTile)d/badSourceHist.fits"
        python:        "lsst.afw.image.DecoratedImageU"
        persistable:        "DecoratedImageU"
        storage:    "FitsStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    source: {
        template:      "results/st%(skyTile)d/source.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:        "SourceCatalog"
        storage:    "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    badSource: {
        template:      "results/st%(skyTile)d/badSource.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:        "SourceCatalog"
        storage:    "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    invalidSource: {
        template:      "results/st%(skyTile)d/invalidSource.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:        "SourceCatalog"
        storage:    "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    object: {
        template:      "results/st%(skyTile)d/object.boost"
        python:        "lsst.afw.detection.PersistableSourceClusterVector"
        persistable:        "PersistableSourceClusterVector"
        storage:    "BoostStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    badObject: {
        template:      "results/st%(skyTile)d/badObject.boost"
        python:        "lsst.afw.detection.PersistableSourceClusterVector"
        persistable:        "PersistableSourceClusterVector"
        storage:    "BoostStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    processCcd_config: {
        template:      "processCcd_config/v%(visit)d-f%(filter)s/R%(raft)s/S%(sensor)s.py"
        python:        "lsst.pex.config.Config"
        persistable:      "Config"
        storage:    "ConfigStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    processCcd_metadata: {
        template:      "processCcd_metadata/v%(visit)d-f%(filter)s/R%(raft)s/S%(sensor)s.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:        "PropertySet"
        storage:    "BoostStorage"
        tables:        raw
        tables:        raw_skyTile
    }

    deepCoadd: {
        template:    "deepCoadd/%(filter)s/%(tract)d/%(patch)d.fits"
        python:      "lsst.afw.image.ExposureF"
        persistable: "ExposureF"
        storage:     "FitsStorage"
        tables:      raw
    }
    deepCoadd_depth: {
        template:    "deepCoadd/%(filter)s/%(tract)d/%(patch)d.depth.fits"
        python:      "lsst.afw.image.ImageF"
        persistable: "ImageF"
        storage:     "FitsStorage"
        tables:      raw
    }
    deepCoadd_psf: {
        template:    "deepCoadd/%(filter)s/%(tract)d/%(patch)d.boost"
        python:      "lsst.afw.detection.Psf"
        persistable: "Psf"
        storage:     "BoostStorage"
        tables:      raw
    }
    deepCoadd_skyMap: {
        template:    "deepCoadd/%(filter)s/skyMap.pickle"
        python:      "lsst.skymap.BaseSkyMap"
        persistable: "ignored"
        storage:     "PickleStorage"
        tables:      raw
    }
    goodSeeingCoadd: {
        template:    "goodSeeingCoadd/%(filter)s/%(tract)d/%(patch)d.fits"
        python:      "lsst.afw.image.ExposureF"
        persistable: "ExposureF"
        storage:     "FitsStorage"
        tables:      raw
    }
    goodSeeingCoadd_depth: {
        template:    "goodSeeingCoadd/%(filter)s/%(tract)d/%(patch)d.depth.fits"
        python:      "lsst.afw.image.ImageF"
        persistable: "ImageF"
        storage:     "FitsStorage"
        tables:      raw
    }
    goodSeeingCoadd_psf: {
        template:    "goodSeeingCoadd/%(filter)s/%(tract)d/%(patch)d.boost"
        python:      "lsst.afw.detection.Psf"
        persistable: "Psf"
        storage:     "BoostStorage"
        tables:      raw
    }
    goodSeeingCoadd_skyMap: {
        template:    "goodSeeingCoadd/%(filter)s/skyMap.pickle"
        python:      "lsst.skymap.BaseSkyMap"
        persistable: "ignored"
        storage:     "PickleStorage"
        tables:      raw
    }
    chiSquaredCoadd: {
        template:    "chiSquaredCoadd/%(tract)d/%(patch)d.fits"
        python:      "lsst.afw.image.ExposureF"
        persistable: "ExposureF"
        storage:     "FitsStorage"
        tables:      raw
    }
    chiSquaredCoadd_psf: {
        template:    "chiSquaredCoadd/%(tract)d/%(patch)d.boost"
        python:      "lsst.afw.detection.Psf"
        persistable: "Psf"
        storage:     "BoostStorage"
        tables:      raw
    }
    chiSquaredCoadd_skyMap: {
        template:    "chiSquaredCoadd/skyMap.pickle"
        python:      "lsst.skymap.BaseSkyMap"
        persistable: "ignored"
        storage:     "PickleStorage"
        tables:      raw
    }
    coaddTempExp: {
        template:    "coaddTempExp/%(filter)s/%(tract)d/v%(visit)d-f%(filter)s/R%(raft)s/S%(sensor)s.fits"
        python:      "lsst.afw.image.ExposureF"
        persistable: "ExposureF"
        storage:     "FitsStorage"
        tables:      raw
    }
}
